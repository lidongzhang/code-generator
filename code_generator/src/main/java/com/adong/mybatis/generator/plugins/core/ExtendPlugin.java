package com.adong.mybatis.generator.plugins.core;

import java.util.*;

import org.mybatis.generator.api.IntrospectedTable;
import org.mybatis.generator.api.PluginAdapter;
import org.mybatis.generator.api.dom.java.*;
import org.mybatis.generator.api.dom.xml.*;
import org.mybatis.generator.api.GeneratedJavaFile;
import org.mybatis.generator.api.IntrospectedColumn;

public class ExtendPlugin extends PluginAdapter  {

    @Override
    public boolean validate(List<String> warnings) {
        return true;
    }

    @Override
    public boolean sqlMapDocumentGenerated(Document document, IntrospectedTable introspectedTable)  {
        addSqlMapUpdateChangedMethod(document, introspectedTable);
        try {
            addSqlMapInsertChangedMethod(document, introspectedTable, "mysql");
            addSqlMapInsertChangedMethod(document, introspectedTable, "sqlserver");
        }catch (Exception e){
            e.printStackTrace();
        }
        return true;
    }

    private boolean isPrimaryKey(String columnName, IntrospectedTable introspectedTable){
        List<IntrospectedColumn> list =  introspectedTable.getPrimaryKeyColumns();
        for(IntrospectedColumn column : introspectedTable.getPrimaryKeyColumns()){
            if(columnName.equals(column.getJavaProperty()))
                return true;
        }
        return false;
    }

    private String getPrimaryKey(String keyName, IntrospectedTable introspectedTable){
        List<IntrospectedColumn> list =  introspectedTable.getPrimaryKeyColumns();
        for(IntrospectedColumn column : introspectedTable.getPrimaryKeyColumns()){
           if(column.isIdentity() && column.isAutoIncrement() && keyName.equalsIgnoreCase(column.getJavaProperty()))
               return column.getJavaProperty();
        }
        return null;
    }

    private IntrospectedColumn getPrimaryKey(IntrospectedTable introspectedTable){
        for(IntrospectedColumn column : introspectedTable.getPrimaryKeyColumns())
            return  column;
        return null;
    }

    private String getWhereByPrimaryKey(IntrospectedTable introspectedTable){
        //"where %s = #{%s,jdbcType=%s}"
        StringBuilder sb = new StringBuilder("where ");

        List<IntrospectedColumn> list =  introspectedTable.getPrimaryKeyColumns();
        boolean isFirst = true;
        for(IntrospectedColumn column : introspectedTable.getPrimaryKeyColumns()){
            String strAnd = "and";
            if(isFirst) strAnd = "";
            String f = column.getJavaProperty();
            String jdbcType = column.getJdbcTypeName();
            sb.append(String.format(" %s %s = #{%s,jdbcType=%s}", strAnd, f, f, jdbcType));

            isFirst = false;
        }
        return sb.toString();
    }

    private void addSqlMapInsertChangedMethod(Document document, IntrospectedTable introspectedTable, String databaseType) throws Exception{
        String pack = this.context.getJavaModelGeneratorConfiguration().getTargetPackage();
        String tableName = introspectedTable.getFullyQualifiedTable().toString();
        String type = String.format("%s.%s", pack, toUpperCaseFirstOne(tableName));
        //insert
        XmlElement insert = new XmlElement("insert");
        //id=insertChanged
        String strId = "";
        String strGetId = "";
        if(databaseType.equals("mysql")){
            strId = "insertChanged";
            strGetId = "SELECT LAST_INSERT_ID()";
        }
        if(databaseType.equals("sqlserver")){
            strId = "insertSqlserverChanged";
            strGetId = "SELECT SCOPE_IDENTITY()";
        }

        Attribute attribute = new Attribute("id", strId);
        insert.addAttribute(attribute);
        attribute = new Attribute("parameterType" , type);
        insert.addAttribute(attribute);
        TextElement text = new TextElement("<!--\n" +
                "      WARNING - @mbg.generated\n" +
                "      This element is automatically generated by MyBatis Generator, do not modify.\n" +
                "    -->");
        insert.addElement(text);
        //selectkey
        XmlElement selectKey = new XmlElement("selectKey");
        String id = getPrimaryKey("id", introspectedTable);
        if(id == null)
            throw new Exception(String.format("表 %s, 没有id字段，或者没有设置为主键和自增型！", tableName));
        //keyProperty="ID"
        attribute = new Attribute("keyProperty", id);
        selectKey.addAttribute(attribute);
        //order="AFTER"
        attribute = new Attribute("order", "AFTER");
        selectKey.addAttribute(attribute);
        //resultType="java.lang.Integer"
        IntrospectedColumn columnKey = getPrimaryKey(introspectedTable);
        String javaType = columnKey.getFullyQualifiedJavaType().toString();
        attribute = new Attribute("resultType", javaType);
        selectKey.addAttribute(attribute);
        //SELECT LAST_INSERT_ID()
        text = new TextElement(strGetId);
        selectKey.addElement(text);
        insert.addElement(selectKey);
        //insert into
        text = new TextElement(String.format("insert into %s", tableName));
        insert.addElement(text);
        //trim
        XmlElement trim = new XmlElement("trim");
        //prefix="(" suffix=")" suffixOverrides=","
        attribute = new Attribute("prefix", "(");
        trim.addAttribute(attribute);
        attribute = new Attribute("suffix", ")");
        trim.addAttribute(attribute);
        attribute = new Attribute("suffixOverrides", ",");
        trim.addAttribute(attribute);
        insert.addElement(trim);
        //column
        for(IntrospectedColumn column : introspectedTable.getAllColumns()){
            String f = column.getJavaProperty();
            if(isPrimaryKey(f, introspectedTable)) continue;
            XmlElement ifElement = new XmlElement("if");
            attribute = new Attribute("test", String.format("%s_changed == true",f));
            ifElement.addAttribute(attribute);
            text = new TextElement(String.format("%s,", f));
            ifElement.addElement(text);
            trim.addElement(ifElement);
        }

        //trim
        trim = new XmlElement("trim");
        //prefix="(" suffix=")" suffixOverrides=","
        attribute = new Attribute("prefix", "values (");
        trim.addAttribute(attribute);
        attribute = new Attribute("suffix", ")");
        trim.addAttribute(attribute);
        attribute = new Attribute("suffixOverrides", ",");
        trim.addAttribute(attribute);
        insert.addElement(trim);
        //column
        for(IntrospectedColumn column : introspectedTable.getAllColumns()){
            String f = column.getJavaProperty();
            String jdbcType = column.getJdbcTypeName();
            if(isPrimaryKey(f, introspectedTable)) continue;
            XmlElement ifElement = new XmlElement("if");
            attribute = new Attribute("test", String.format("%s_changed == true", f));
            ifElement.addAttribute(attribute);
            text = new TextElement(String.format("#{%s,jdbcType=%s},", f, jdbcType));
            ifElement.addElement(text);
            trim.addElement(ifElement);
        }
        document.getRootElement().addElement(insert);
    }

    private void addSqlMapUpdateChangedMethod(Document document, IntrospectedTable introspectedTable){
        String pack = this.context.getJavaModelGeneratorConfiguration().getTargetPackage();
        String tableName = introspectedTable.getFullyQualifiedTable().toString();
        String type = String.format("%s.%s", pack, toUpperCaseFirstOne(tableName));
        XmlElement element = new XmlElement("update");
        Attribute attribute = new Attribute("id", "updateByPrimaryKeyChanged");
        element.addAttribute(attribute);
        attribute = new Attribute("parameterType", type);
        element.addAttribute(attribute);
        TextElement text = new TextElement("<!--\n" +
                "      WARNING - @mbg.generated\n" +
                "      This element is automatically generated by MyBatis Generator, do not modify.\n" +
                "    -->");
        element.addElement(text);
        text = new TextElement(String.format("update %s", tableName ));
        element.addElement(text);
        XmlElement set = new XmlElement("set");
        element.addElement(set);

        for(IntrospectedColumn field : introspectedTable.getAllColumns()){
            String f = field.getJavaProperty();
            String jdbcType = field.getJdbcTypeName();
            if(isPrimaryKey(f, introspectedTable)) continue;
            XmlElement ifXmlElement = new XmlElement("if");
            Attribute a = new Attribute("test", String.format("%s_changed == true", f));
            ifXmlElement.addAttribute(a);
            TextElement t = new TextElement(String.format("%s = #{%s,jdbcType=%s},", f, f, jdbcType));
            ifXmlElement.addElement(t);
            set.addElement(ifXmlElement);
        }

        TextElement where = new TextElement(getWhereByPrimaryKey(introspectedTable));
        element.addElement(where);
        document.getRootElement().addElement(element);
    }

    @Override
    public boolean clientGenerated(Interface inter, TopLevelClass topLevelClass, IntrospectedTable introspectedTable){
        //int updateByPrimaryKeySelective(User record);
        Method method = new Method();
        method.setName("updateByPrimaryKeyChanged");
        method.setReturnType(FullyQualifiedJavaType.getIntInstance());
        String table = introspectedTable.getBaseRecordType();

        FullyQualifiedJavaType type = new FullyQualifiedJavaType(table);
        Parameter p = new Parameter(type, "record");
        method.addParameter(p);
        this.context.getCommentGenerator().addGeneralMethodComment(method, introspectedTable);
        inter.addMethod(method);

        //int insertChanged(User record);
        method = new Method();
        method.setName("insertChanged");
        method.setReturnType(FullyQualifiedJavaType.getIntInstance());
        p = new Parameter(type, "record");
        method.addParameter(p);
        this.context.getCommentGenerator().addGeneralMethodComment(method, introspectedTable);
        inter.addMethod(method);

        //int insertSqlserverChanged(User record);
        method = new Method();
        method.setName("insertSqlserverChanged");
        method.setReturnType(FullyQualifiedJavaType.getIntInstance());
        p = new Parameter(type, "record");
        method.addParameter(p);
        this.context.getCommentGenerator().addGeneralMethodComment(method, introspectedTable);
        inter.addMethod(method);

        return true;
    }

    @Override
    public boolean modelFieldGenerated(Field field, TopLevelClass topLevelClass, IntrospectedColumn introspectedColumn, IntrospectedTable introspectedTable, ModelClassType modelClassType) {
        //System.out.println(String.format("FieldGenerated: name:%s, type:%s", field.getName(), field.getType()));
        return true;
    }
    @Override
    public boolean modelSetterMethodGenerated(Method method, TopLevelClass topLevelClass, IntrospectedColumn introspectedColumn, IntrospectedTable introspectedTable, ModelClassType modelClassType) {
        //System.out.println(String.format("FieldGenerated: name:%s", method.getName()));
        return true;
    }
    @Override
    public boolean modelBaseRecordClassGenerated(TopLevelClass topLevelClass, IntrospectedTable introspectedTable) {
        //System.out.println("This is BaseRecordClassGenerated");
        addAnnotation(topLevelClass);
        addJsonFormat(topLevelClass, introspectedTable);
        addJsonProperty(topLevelClass, introspectedTable);
        extendGenerator(topLevelClass, introspectedTable);
        return true;
    }
    @Override
    public boolean modelRecordWithBLOBsClassGenerated(TopLevelClass topLevelClass, IntrospectedTable introspectedTable) {
        //System.out.println("This is RecordWithBLOBsClassGenerated");
        addAnnotation(topLevelClass);
        addJsonFormat(topLevelClass, introspectedTable);
        addJsonProperty(topLevelClass, introspectedTable);
        extendGenerator(topLevelClass, introspectedTable);
        return true;
    }
    @Override
    public boolean modelPrimaryKeyClassGenerated(TopLevelClass topLevelClass, IntrospectedTable introspectedTable) {
        //System.out.println("This is PrimaryKeyClassGenerated");
        addAnnotation(topLevelClass);
        addJsonFormat(topLevelClass, introspectedTable);
        addJsonProperty(topLevelClass, introspectedTable);
        extendGenerator(topLevelClass, introspectedTable);
        return true;
    }

    @Override
    public List<GeneratedJavaFile> contextGenerateAdditionalJavaFiles(){

        return null;
    }

    private void addAnnotation(TopLevelClass topLevelClass){
        //import org.springframework.context.annotation.Scope;
        //import org.springframework.stereotype.Component;
        topLevelClass.addImportedType("org.springframework.context.annotation.Scope");
        topLevelClass.addImportedType("org.springframework.stereotype.Component");
        topLevelClass.addImportedType("com.fasterxml.jackson.annotation.JsonFormat");
        topLevelClass.addImportedType("com.fasterxml.jackson.annotation.JsonProperty");
        topLevelClass.addAnnotation("@Component");
        topLevelClass.addAnnotation("@Scope(\"prototype\")");
    }

    private Method findMethod(TopLevelClass topLevelClass, String methodName){
        for(Method m : topLevelClass.getMethods()){
            if(m.getName().equals(methodName))
                return m;
        }
        return null;
    }

    private void addChangedToSetMethod(List<Field> tempFields, TopLevelClass topLevelClass, IntrospectedTable introspectedTable){

        for(Field f : tempFields){
            String methodName = String.format("set%s", toUpperCaseFirstOne(f.getName()));
            Method m = findMethod(topLevelClass, methodName);
            m.addBodyLine(String.format("this.%s_changed = true;", f.getName()));
        }

    }

    /**
     * 扩展具体内容：
     * model：
     *  1.对所有字段增加一个 字段名_changed 的boolean变量。
     *  2.对所有字段增加 set字段名_changed 的方法。 方法内把 字段_changed 的值设置为true。
     *  3.对Date类型的字段增加三个get方法：get字段名_fmt_yyyy_MM_dd_HH_mm_ss  get字段名_fmt_yyyy_MM_dd  get字段名_fmt_HH_mm_ss
     *  4.对所有字段增加 get字段名_changed 的方法。 方法内把 字段_changed 的值返回。
     * */
    //region extendGenerator
    private void extendGenerator(TopLevelClass topLevelClass, IntrospectedTable introspectedTable){
        List<Field> var5 = topLevelClass.getFields();

        List<Field> tempFields = new ArrayList<Field>() ;
        tempFields.addAll(var5);
        for(Field field : var5){
            if ( "java.util.Date".equalsIgnoreCase(field.getType().getFullyQualifiedName())){
                addGetDateFormatMethod(field, topLevelClass, introspectedTable);
            }
        }

        addChangedField(tempFields, topLevelClass, introspectedTable);
        //addChangedMethod(tempFields, topLevelClass, introspectedTable);
        addChangedToSetMethod(tempFields,topLevelClass, introspectedTable);
        addGetChangedMethod(tempFields, topLevelClass, introspectedTable);
    }

    private void addJsonFormat(TopLevelClass topLevelClass, IntrospectedTable introspectedTable){
        for(IntrospectedColumn column : introspectedTable.getAllColumns()){
            String jdbcType = column.getJdbcTypeName();
            if(jdbcType.equals("DATETIME") || jdbcType.equals("TIMESTAMP")){
                //@JsonFormat(pattern="yyyy-MM-dd hh:mm:ss",timezone="GMT+8")
                Field field = findField(column.getJavaProperty(), topLevelClass);
                field.addAnnotation("@JsonFormat(pattern=\"yyyy-MM-dd hh:mm:ss\",timezone=\"GMT+8\")");
            }

            if(jdbcType.equals("DATE")){
                Field field = findField(column.getJavaProperty(), topLevelClass);
                //@JsonFormat(pattern="yyyy-MM-dd",timezone="GMT+8")
                field.addAnnotation("@JsonFormat(pattern=\"yyyy-MM-dd\",timezone=\"GMT+8\")");
            }
            if(jdbcType.equals("TIME")){
                //@JsonFormat(pattern="hh:mm:ss",timezone="GMT+8")
                Field field = findField(column.getJavaProperty(), topLevelClass);
                field.addAnnotation("@JsonFormat(pattern=\"hh:mm:ss\",timezone=\"GMT+8\")");
            }
        }
    }

    private Field findField(String name, TopLevelClass topLevelClass){

        for(Field f : topLevelClass.getFields()){
            if(f.getName().equals(name))
                return f;
        }
        return null;
    }



    private void addJsonProperty(TopLevelClass topLevelClass, IntrospectedTable introspectedTable){
        for(IntrospectedColumn column : introspectedTable.getAllColumns()){
            String setMethodName = String.format("set%s", toUpperCaseFirstOne(column.getJavaProperty()));
            String getMethodName = String.format("get%s", toUpperCaseFirstOne(column.getJavaProperty()));
            String columnName = column.getJavaProperty();
            String jsonJsonProperty = String.format("@JsonProperty(\"%s\")", columnName);
            findMethod(topLevelClass, setMethodName).addAnnotation(jsonJsonProperty);
            findMethod(topLevelClass, getMethodName).addAnnotation(jsonJsonProperty);
        }
    }

    private void addGetDateFormatMethod1(String dateFormat, String formatName, Field field, TopLevelClass topLevelClass, IntrospectedTable introspectedTable) {
        Method method = new Method();
        method.setVisibility(JavaVisibility.PUBLIC);
        method.setReturnType(FullyQualifiedJavaType.getStringInstance());
        method.setName(String.format("get%s_fmt_%s", toUpperCaseFirstOne(field.getName()), formatName));
        method.addAnnotation(String.format("@JsonProperty(\"%s_fmt_%s\")",field.getName(),formatName));
        this.context.getCommentGenerator().addGeneralMethodComment(method, introspectedTable);

        method.addBodyLine(String.format("if ( %s == null) { return \"\";}", field.getName()));
        method.addBodyLine(String.format(" return (new java.text.SimpleDateFormat(\"%s\")).format(%s);",
                dateFormat, field.getName()));

        topLevelClass.addMethod(method);
    }

    private void addGetDateFormatMethod(Field field, TopLevelClass topLevelClass, IntrospectedTable introspectedTable) {
        addGetDateFormatMethod1("yyyy-MM-dd HH:mm:ss","yyyy_MM_dd_HH_mm_ss",field, topLevelClass, introspectedTable);
        addGetDateFormatMethod1("HH:mm:ss","HH_mm_ss",field, topLevelClass, introspectedTable);
        addGetDateFormatMethod1("yyyy-MM-dd","yyyy_MM_dd",field, topLevelClass, introspectedTable);
    }

    private void addChangedField(List<Field> tempFields, TopLevelClass topLevelClass, IntrospectedTable introspectedTable) {
        for (Field field : tempFields) {
            Field temp = new Field();
            temp.setName(String.format("%s_changed", field.getName()));
            temp.setVisibility(JavaVisibility.PRIVATE);
            temp.setType(FullyQualifiedJavaType.getBooleanPrimitiveInstance());
            temp.getType().getFullyQualifiedName();
            this.context.getCommentGenerator().addFieldComment(temp, introspectedTable);//addGeneralMethodComment(temp, introspectedTable);
            topLevelClass.addField(temp);
        }
    }

    //废弃
    private void addChangedMethod(List<Field> tempFields, TopLevelClass topLevelClass, IntrospectedTable introspectedTable){
        for (Field field : tempFields) {
            Method method = new Method();
            method.setVisibility(JavaVisibility.PUBLIC);
            method.setReturnType(null);
            method.setName(String.format("set%s_changed", toUpperCaseFirstOne(field.getName())));
            Parameter p = new Parameter(field.getType(), field.getName());
            method.addParameter(p);

            this.context.getCommentGenerator().addGeneralMethodComment(method, introspectedTable);
            method.addBodyLine(String.format("this.%s_changed = true;", field.getName()));
            method.addBodyLine(String.format("set%s(%s);",
                                            toUpperCaseFirstOne(field.getName()),
                                            field.getName()));
            topLevelClass.addMethod(method);
        }
    }

    private void addGetChangedMethod(List<Field> tempFields, TopLevelClass topLevelClass, IntrospectedTable introspectedTable) {
        for(Field field: tempFields){
            Method method = new Method();
            method.setVisibility(JavaVisibility.PUBLIC);
            method.setReturnType(FullyQualifiedJavaType.getBooleanPrimitiveInstance());
            method.setName(String.format("get%s_changed", toUpperCaseFirstOne(field.getName())));

            this.context.getCommentGenerator().addGeneralMethodComment(method, introspectedTable);
            method.addBodyLine(String.format("return this.%s_changed;", field.getName()));
            topLevelClass.addMethod(method);
        }
    }
    //endregion

    //首字母转大写
    private  String toUpperCaseFirstOne(String s){
        if(Character.isUpperCase(s.charAt(0)))
            return s;
        else
            return (new StringBuilder()).append(Character.toUpperCase(s.charAt(0))).append(s.substring(1)).toString();
    }
}
